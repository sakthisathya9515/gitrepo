Git commands

git add * - add all files 
git add -A

git status - show status

git status -s 

git diff HEAD

git diff --staged

git diff master <branch_name>

git difftool

git reset -- hard , git reset --hard<filename>

git revert <commitHash> , get the hash value in git log

git log

git log -p <number of commit>

git show < option> <objects> - to get specific information

Git config

git config -h

three config - locak,global,system

gobal level : global config --gobal --list (./git)

local level : config --local --list

system level : git config --system --list high level : (/etc/.gitconfig) 







git commit -m - add files

git commit -am

git rm - remove file

git rm --cached 

git restored

git mv

git clean -n

git clean -f force 

git clean -x ignore file clean



git add -u - add currently tracked files which have been modified to the staging area and also check if those are deleted or not 

Add such file to a file .gitignore

Runtime files such as log, lock, cache, or temporary files.

Files with sensitive information, such as configuration files passwords or API keys

Compiled code, such as .class, jar files, .o, so files

Dependency directories, such as /vendor or /node_modules

System files like .DS_Store or Thumbs.db

IDE or text editor configuration files



Lesson -3 - git repositories


repository - local , global/remote, 


visibility - public

terminolgy orgin

org/project/master->forking->developer project/master->cloning->git(internet) -<code(local)


push and pull
-------------

local ->push/pull<-remote

clone
-----
fetch and merger
---------------

origin/master

git pull <remote>
git fetch <remote>
gti merge origin/<current-branch>

intro to github
----------------

*features

Working with github
create new repository

create a new repository on the command line
echo "# gitrepo" >> README.md
  git init
  git add README.md
  git commit -m "first commit"
  git branch -M main
  git remote add origin https://github.com/sakthisathya9515/gitrepo.git
  git push -u origin main


push an existing repository from the command line

git remote add origin https://github.com/sakthisathya9515/gitrepo.git
  git branch -M main
  git push -u origin master


Config SSH key


Add key to the SSH-agent



Check/Run SSH-agent in
background

$ eval "S (ssh-agent -s) "

Add key to SSH-agent

$ ssh-add ~/.ssh/id_cd25519

Check the SSH connection

$ ssh -T git@github.com


create Github account

push pull


  git push -u origin master

git push
git pull
git fetch
-------
get fetch URL
git fetch <branch URL>
git merge FETCH_HEAD
git fetch -all


git pull
--------

git pull origin master
git pull --all
git pull

clone
-----
git clone URL
git clone -n <brtanch name> <URL>
git clone https


git pull repo name to get the lastest version of repository

git checkout

connect with remote server

git remote add origin <servername>

git remote -v

delete branch
--------------
git branch -d branch name - delete in local
git branch -D branch name - both remoete and local
git push origin --delete branch name - only in branch

work withn remote repo
----------------------

git remote remove
git remote -v
git remote rename  <old> <new>

-- track
<remcte-repository>/<remote-branch>

git. checkout

To create a local branch with the same name as
the remote branch

git checkout -- track -b <local branch>
<remote-repository>/<remote-branch>

To create a local branch with different name from
remote branch

git branch -vv

To verify tracking branches

git branch -- v

To see latest commits, commits information and
head pointer related information


fork a remote repo

fork repo into github account - github repo fork <public repo>
for github repo and clone to local - github repo fork <public repo> --clone


To add a remote upstream repo

git remote add upstream https://Gitlub.com/MyGITProject/Commerce-DevOps.git

To
take update from
public repository
also

Tc
synchronization
from public
repository

clone vs fork

we can clone the repo and push and pull in clone 

in fork there is no access , so we need to fork and push and pull to work from fork

git vs                github

software              service

CLI                    GUI

linux                  microsoft

Version control        code host platform

no user manag          built-in user


Working with git hub repo
-------------------------

add readme
add .gitignore with coding language
license



Lesson -4 life cycle of git

git file states

untraked->staged->committed-> modified

HEAD

git show HEAD - recent updated branch lastest commit

cat .git/HEAD

Working on the file in staging area

git status

git status -s

check file status

git diff HEAD
git diff --summary

to mve stagging area

git add and so on


STAGING TO LOCAL REPO

git commit

git commit "message"

BBYPASS STAGING

git commit -a

git commit -am

REVERTING COMMIT AND CHANGING

revert the commit - git revert

git revert <hash>

git revert <commit-id>

REVERT MERGE

main commit and merge commit

git revert <commit reference> -m 1 = -m1 is used for the first parent


RESET FLAG

HEAD ->master->file

git reset --main/dontcheckmain.txt - specific file

git reset file.txt 

reset flags - --soft,--hard,--hard


soft reset - Staging Index and the working
are left untouched

hard - all change are completly removed

mixed -hard+soft not reset from working dir

use case

git reset --soft HEAD - commit will cancel and moved before HEAD


reset comparison


Reset Comparison
                    HEAD Staging/Index  Working directory
  
                     HEAD   Index            Workdir      DirectorySafe?
Commit Level
reset soft [commit]   REF    NO                NO             YES
reset [commit]        REF    YES               NO              YES
reset -hard [commit]  REF    YES              YES              NO
checkout <commit>     HEAD   YES              YES             YES
File Level
reset [commit] <paths> NO     YES             NO              YES
checkout [commit] <paths>NO   YES             YES              NO


understanding ^(caret) and ~(tilde)

HEAD~n or HEAD^n - commit before HEAD (HEAD~2) parent-parent

	

 GIT INTERNALS

git OBJECTS

repo - object

BLOB- the content of files are stores in objects (Binary large object)
secured
evry blob in git is identified by SHA -1 hash

Tree - dir struct
refers to blobs 
SHA -1

commit - snapshot 

HEAD points to latest commit branch
commit is snap
every commit holds entire snp

data stored in git

tree ->readme and rakefile ->blob
tree ->lib->tree->simple.rb

git lifecycle demo

create rep , add , commit ,restore ,reset hard (done)


Lesson 5 : Git Barnching 

we can have dev branch and master branch which is production server branch

git branch
git branch --list

SWITCH BRANCH

git checkout
git checkout test
git brach -m master rename 
git checkout -b feauture to create and switch from feature branch


remove brach in remote

git push origin --delete <old branch>
git push -u origin <new-name>

BRANCH TRACKING

git branch -u
git branch -vv
git push -u origin <local-branch>

git branch --track <new branch> origin/base-branch - proper track

git checkout --track origin/<base-bran>s - track and communicate with branch

git branch -vv helps to visualize tracking related info

delete branch

-d - safe
-D - force
git branch -d my-new-branch

in REMOTE

git push origin --delete <branch-name>

DIFF btw branch

git diff branch name

Push and commit changes

git push origin <branchname>

TYPES oF BRANCH

Features branch

master branch
 
develop branch(intergration)

release branch

hotfix branch

1 MASTER

default branch 

2 FEATURE

multiple features
bugfix
new few
intergera with dev

3 REALESE

final branch
once dev complete then realease
only release branch is connect with master

4 HOTFIX
add a critile fix
merge with master
if issue in production env and want to avoid the full cycle of dev


5 .DEVELOPE AND INTERGARTIOn

used for develop
develope intgerate with master


DEMO



GIT MERGE


git merge <branch-name>

check the avaiable log in the develop branch

git checkout master
make master branch as current branch

git merge develop
merge the branch into master

Types of merge 

Two way fast forward - develop to master (ex : feature f1 snaphot compare to master m1)
three way - (ex: feature f3 and master m4 snap will comapare with master m3(ancestor) ) - somtime it make conflicts

MERGE CONFLICT


During the integration of different feature
branches into the develop branch may
cause conflicts

RESOLVE

Open the conflicted file and make the necessary changes

Use git add command to stage the newly merged content

Perform a new commit using git commit command

Git creates a new merge commit to finally complete the merge


commands

git log --merge    To generate a list of conflicting commitments
git diff           To identify differences between repositories or files
git checkout       To reverse the file changes or to change branches
git reset --mixed  To undo changes in the working directory and screen
git merge --abort  To exit the merge and return to the state before the merging starts
git reset          To reset the disputed files

MEREGETOOLS

git mergetool

MEREG DEMO

git merge in no fast forward

git merge develop --no--ff

MERGE STRATIGIES

recurisive -default
resove - 3 way merge   git merge -s resolve br1 br2
octopus -2 barch                 -s octopus b1 b2 b3 b4 b5
ours -                            -s ours b1 b2 b3 b4
all change from branch is ignore and master will be considered (does not consider the changes from feature branch in cases of conflict and uses our changes)
subtree -                       -s subtree b1 b2 b3 b4
used for merging tree which have common ancestor 
A and B - merge A and B (only have common ancestor)

RESOLVE MEREGE CONFLICTS
 
DEMO

REBABSE
rebese is a single "patch" for all changes 
git rebase <branch-name>


Clean history 
easy to manipulate any commit
avoid merging noise
cleans intermindiate
multiple commits

REBASING DEMO
rebase must done in master branch


IDE WITH GITHUB
---------------

LESSON 6 GIT WITH IDE

git extension pack with vscode

git lense
gitignore

INTELLIJ IDE
------------

Chain code completion
static member completion
detect duplication
insepc and quick file

DEMO
















